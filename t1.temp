@bot.command(name="whitelist", aliases=['wl'])
@commands.is_owner()
async def whitelist(ctx, id, app=None):
    id = get_id_from_mention(id)
    try:
        await bot.fetch_user(id)
        pass    
    except NotFound:
        try:
            if write_whitelist_role(id, app):
                if app is not None:
                    await ctx.send(f"Whitelist role {id} : {await return_name_of_role(id)} for app {app}")
                    asyncio.create_task(log(f"Whitelisted role {id} : {await return_name_of_role(id)} for app {app}", ctx))
                else:
                    await ctx.send(f"Whitelist role {id} : {await return_name_of_role(id)} globally")
                    asyncio.create_task(log(f"Whitelisted role {id} : {await return_name_of_role(id)} globally", ctx))

            else:
                await ctx.send("Already Whitelisted")
        except HTTPException:
            await ctx.send("Error, could you please re-run the command")
        return
    if write_whitelist_user(id, app):
        if app is not None:
            await ctx.send(f"Whitelisted user {id} : {await return_name_of_user(id)} for app {app}")
            asyncio.create_task(log(f"Whitelisted user {id} : {await return_name_of_user(id)} for app {app}", ctx))
        else:
            await ctx.send(f"Whitelisted user {id} : {await return_name_of_user(id)} globally")
            asyncio.create_task(log(f"Whitelisted user {id} : {await return_name_of_user(id)} globally", ctx))
    else:
        await ctx.send("Already whitelisted?")
